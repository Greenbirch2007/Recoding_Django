# 　　第７章　Models与数据库


# 资料库是动态网站中最重要的组成元素,因为几乎所有网页内容都是保存在资料库中的.传统的php网站在存取资料时都是以SQL的语法来完成的
#  Django使用ORM的概念吧啊资料存取的过程抽象化,通过Model来定义资料表,并让网站开发人员能够使用Python的语法来存取资料库的内容,
#   大幅简化了网站存取资料的复杂度,也增加了等多弹性
#  本节学习定义Model的相关细节以及如何进行多资料表整合查询,学习如何调整admin资料库管理界面,还有如何通过设定,让我们的网页可以直接与云端的mysql服务器连接,
#  提高资料库管理能力以及资料库操作性能



#  7.1  网站与数据库


#  动态网站最重要的部分是数据库,把所有数据通过数据库系统维护在一些数据表中,在需要的时候再以条件式查询的返观内视取出,然后送到网页显示出来,或通过新增指令
#  存储新的数据记录,或针对特定的数据项进行修改等.由数据库维护所有内容可以提高数据存取的效率,也可以增加网站提供信息的能力.然而,管理数据需要事先经过规划,
#  才能够真正符合网站的需求,



#  7.1.1  数据库的简介

#  网页服务器所使用的数据库系统大多为关系数据库系统.网站系统要存取数据库需要先有一个正确的数据库驱动接口,通过此接口才可以使用该数据库接收的查询命令(sql查询语言)
#  并在使用之前进行数据库的连接工作.数据库系统通常都是以独立的服务程序运行在某一个主机上,所以在连接时,除了要指定连接操作用的账号和密码外,也必须
#  指定主机位置的相关信息,大部分情况下网页服务器和数据库系统位于同一个主机上,所以在指定主机的位置时,只要使用localhost就可以了,事实上,数据库系统是可以
#  独立存在于网络上任何一个主机上,而许多主机供应商也提供这个服务


#   在django中操作数据库的流程如下

#    数据内容---->驱动程序接口 ----->django Models机制 -----> 控制处理函数 views.py  ------> Model类  models.py


#  至于数据库驱动接口,要看网站系统有没有提供
#  在django中,默认的数据库管理系统是sqlite(可以通过系统设置修改为其他系统),这是一个文件形式的简易型数据库管理系统.它的好处是简洁方便,同时也和mydql
#  兼容,然而只适合测试开发时使用,对于要使用真正的大型数据库或正式上架的网站,其扩充型和性能就会有非常大的限制.


#  7.1.2   规划网站需要的数据库


#  由于网站中最重要的内容是数据库,因此开始设计网站的第一步不是马上开始编写程序,而是根据网站的需求先设计数据库,确定数据库的所有细节,并做下一章的正规化步骤之后
#  才能够开始网站的程序设计.因为数据库的内容如果在开始设计程序时才发现不符合实际需求或数据表之间的关系有误,再要回去修改数据库的格式以及结构,
#  往往会造成程序内容极大地变动,会话费更多精力,而且可能会冒出许多的不该发生的错误


#  假设要建立一个中古手机展示网站(先不考虑订购功能),先来看一下二手库存表,初步进行模型分析


#  首先是品牌和型号均有冲肚饿内容.另外,有些照片暂缺,有些照片超过1张,也就是照片字段的长度是不固定的,根据数据库正规化的原则,不能直接把这张表格变成一张数据表

#  而是要拆解成不同的几张数据库表,并建立这些数据表之间的关系.由于django在建立每一个数据表的同事就会有一个内建的id作为主键(primary key ),因此在此就不需要另外在设置主键字段

#  先以可销售的二手手机商品Product作为此数据库的主数据库,然后把所有手机照片链接当做另一张表格PPhoto,这两张表的关系如下

#  每一个产品Product的数据项里面都包含一个昵称nickname,一个说明description,一个出厂年份year以及价格price字段,PPhoto用来记录每一张产品照片,
#  每张 产品照片除了照片的网址url外,也有一个小段照片的说明description,而最重要的每一张照片都会附属于某一个产品(二手手机),它们之间的关系应该是1对多
#  (我们用1和N来表示).也就是说,一个产品可能会有多张产品,而每一张照片只属于其中的一个产品,要表示这样的关系,就要在PPoto中设置一个字段product,
#  然后让此字段以外部键(ForeignKey)的的方式链接到Product的id


#  一次类推,除了产品的照片外,每一个产品还有手机的型号PModel(多对1,一个手机只有一个型号,而一个型号可以被多项产品使用),而每一个手机型号对应一个手机制造商Maker,
#  以此设计,本网站所使用的数据表名称,字段以及关系可以如下图


#  制造商Maker有两个字段,分别是名称name以及制造商登记国家country,而手机型号包括型号名称name以及链接到其他网站上的针对此手机规格介绍的网址url,以及一个
#  指向制造商的maker.Product再加上一个pmodel字段,指向手机的型号PModel,



#  7.1.3  数据表内容设计

#  网站数据库的数据表用途说明

#  数据表 Maker      用途  所有手机厂商列表
#  数据表 PModel      用途  手机规格名称以及网址信息
#  数据表 Product      用途  目前库存的手机列表
#  数据表 PPhoto     用途   二手手机照片


#  其中Maker数据表需要的字段如下

#  字段:name    格式:字符,最多10个字符    说明:厂商名称
#  字段:country    格式:字符,最多10个字符    说明:厂商所属国家


#  PModel数据表需要的字段

#  字段:maker    格式:指向Maker          说明:制造商名称
#  字段:name    格式:字符,最多20个字符     说明:用来显示手机款式名称
#  字段:url    格式:url格式               说明:说明此手机规格的网址


#　PPhoto数据表需要的字段如下，至于照片内容的备份，现阶段是把照片先传上去到第三方照片管理网站(在此使用imgur.com),在上传之后再取得其网站的链接网址，
# 然后放在url的字段中，因此使用url格式即可

#  PPhoto数据表需要的字段

#  字段:product        格式:指向Product      　　　　　　    说明:产品名称
#  字段:description    格式:字符，最多２０个字符              说明:说明此照片的内容
#  字段:url            格式:URL格式         　　　　　　　 说明:存储此照片的网址


# 最后是用来记录目前库存手机的Product数据表需要的字段,需要特别注意的是,因为二手手机的特性,我们嘉盛每一部二手手机的情况都不同,因此每一个产品
# 项目只会有1部二手手机,在数据字段中没有"库存数量"数据项

# Prodcut 数据表需要的字段

#  字段:pmodel        格式:指向Pmodel      　　　　　　    说明:手机规格
#  字段:nickname        格式:字符,最多 15个字符      　　　　　　    说明:此手机的简单说明
#  字段:description        格式:文字字段      　　　　　　    说明:此手机的详细说明
#  字段:year        格式:正整数     　　　　　　    说明:制造年份
#  字段:price        格式:正整数      　　　　　　    说明:售价



#  7.1.4  models.py 设计

# 根据上面的数据表规划以及设计,可以把网站的model设计如下
# 为了能够在此文件中编写中文信息，第一行的编码设置不可少．每一张数据表均对应一个类，类的命名习惯是第一个英文字母为大写，每一个数据类均继承子models.Model类
# (python 是以类名称后面小括号内的内容来指定父类，在此例中年的数据表类的父类均为models.Model)
# 每一个类中，属性名称后面接的models.xxxField(xxx=??)是设置字段格式的方法，
# 与前面不同的是，我们定义了不同数据表之间的关系，例如Pmodel里面的maker，定义如下

maker = models.ForeignKey(Maker,on_delete = models.CASEADE)

# ForeignKey是外键，它负责指向另一张表格的主键Primary key,表示这个表格是依附于另一张表格的．有了这层关系后，PModel的maker一定来自于Ｍaker表格，
# 才不会出现手机的型号，但是却不知道手机制造商的问题．至于要指向Maker表格的哪一个主键，Django会自动处理(每一个类Django都会自动加上一个id主键)
# 我们只要使用ForeignKey方法指向要指向的类即可．同样的情况，PPhoto的Product,而Product的pmodel也指向PModel

# 至于on_delete = models.CASCADE这个属性，则是设置当前被引用的对象(Maker)被删除时，此引用对象(PModel)也要一并执行删除的操作．

# models.PROTECT: 禁止删除并产生一个Excption(ProtectedError)
# models.SET_NULL:把外键设置为null,但是在规划时此字段要设置为可接受null
# models.SET_DEFAULT: 把外键设置为默认值，但是在规划时此字段要设有默认值
# models.DO_NOTHING:　什么都不做