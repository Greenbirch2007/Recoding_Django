# 1.1.  网站的基础知识


# web网站可以简单到只要周到主机空间，把.html和.jpg文件放在适当的位置即可，只有了解web网站运行的流程，才能够知道如何决定适合自己的网站构建方式

# １．１．１　　网站的运行流程

# 　架设网站的方式有很多，最简单的方式就是把文件放在网络主机上，当浏览者通过浏览器链接进来的时候，网络服务器把这个文件提供给浏览器加以解析
# 再呈现或显示给浏览者．如下，用户浏览网站的基本流程

# 　１．　用户通过浏览器请求浏览　http:hopphd.com
#  2.  收到来自浏览器的请求
# ３．　启动apache线程，获取index.html
# 4. 把index.html传送给用户的浏览器
# ５．　浏览器获取index.html,执行javascript及HTML之后，显示结果
#

# 除了硬件的网站主机之外，另外一个重点在主机上运行的web网络服务器系统软件．

# 常见的web服务器软件有apache,nignx以及windows　server上的IIS．要让网站得以正常运行需要有一台网络主机，而真正响应远程浏览器访问请求的是
# 在主机中运行的服务软件．apache和nignx在许多地方是兼容的，而可供部署的主机操作系统还是linux为主．本书都是以linux加上apache环境为主

# 前面所说的湾站被称为静态网站．所有文件以及数据都不会针对用户的需求而临时产生，都是实现准备好的．如果需要应对不同的访问而产生不同的数据，甚至在显示
# 数据前还要从数据库或其他数据源获取数据，再加以整合，计算，分析后再显示给浏览者，这种情况下就有一些工作必须在网站主机上先执行，这就是所谓的动态网站

# 动态网站的运行流程：
# １．　用户通过浏览器请求浏览http://hopphd.com
# 2. 收到来自浏览器的请求
# ３．　开启apache线程，按设置文件获取index.php或wsgi.py
# 4. 执行相应的程序
# ５．　存储数据库内容
# ６．　把执行结果传回用户额浏览器
# ７．　浏览器收到服务器的执行结果，执行javascript以及HTML之后，显示结果

# 　一个好的动态网站会通过浏览器给浏览者提供一个完整的输入界面，通常都是以窗体的方式呈现，并在浏览者选择后把得到的数据在网站主机上进行处理，再把
# 筛选过的数据提供给浏览者查看．对于那些在主机上执行的程序，我们一般把它们使用的程序设计语言叫做后端语言，如python,php


# 1.1.2  python/Django扮演的角色


# 浏览者输入一个网址，网站主机的软件服务器(以apache为例)在收到此请求后会先按照配置文件的内容决定把此网址请求交由哪一个文件来处理．如果没有特别的设置，
# 一般都会以php为主．在开始处理浏览器的请求时，表示处理的程序也要自行处理HTTP(Hyper Text Transger Protocol,WWW网站的专用通信协议)的相关细节
# python已经有了可以使用的相关模块，针对许多现代网站的必备功能(如用户账号管理，窗体输入，网页输出样式，网站和数据库链接等)，出现了所谓的
# web　framework(网站框架),让使用这些程序设计语言的开发者

# Django把程序放在主机某一个特定的文件夹下，通过apache的配置文件指定此组程序所在的位置，当有网页被存取时再执行并返回执行的结果给apache,最后传送到用户的浏览器中

# 每当主机接收到来自浏览器的连接请求时,Django中的某一个程序文件就可以得到被执行的机会，我们就可以在这个程序文件中以python语言来编写需要处理的，运算
#  存取数据库等的程序代码，让网页的请求可以更加客户化，实时响应用户的需求，提供更多的网站的服务

#  只要学会了Django的架构内容以及运行原理，就可以充分运用python处理字符串，数据库，图像绘图，商业统计，科学运算以及网站的相关细节，并提供更多网站服务功能

#　１．１．３　　使用python/Django建立网站的优势

#  django的框架可以省去处理通信协议的相关细节，把精力都放在网站的相关服务设计上．

#  另外，django在设计的时候均有遵循模块化的设计概念，又把数据库和python的连接做了抽象化设计，以用户数据库为主的模型化让一些第三方网站功能模块也可以轻松加入
#  我们的网站．由于数据库是抽象化的，可以使用python的方式来处理数据库中的数据，日后如果需要更换数据库种类，也较为容易

#