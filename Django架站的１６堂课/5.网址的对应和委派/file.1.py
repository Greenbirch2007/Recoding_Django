# 第5章 网址的对应与委派

#　网址的对应对于网站制作来说很重要，因为那是用户通过浏览器来我们额网站的第一关．网址的内容通常是值浏览者想要浏览的项目，如何编排以及接收网址的形式
# 然后根据网址的内容把信息委派给views.py中适当的处理函数，是本章的重点


# ５．１　　Django网址架构

# 和利用php网站不一样额地方在于：在Django中全部都是以一般的路径网址来表示，在网址中基本上不会出现文件的名称(如index.php)．也不会有特殊的符号，看起来
# 就是很典型的网址字符串，内容如何解析则开发给网站设计这全权设置，非常有弹性　


# 5.1.1  URLconf简介

# Django使用URLconf这个模块来作为网址的解析并且对应到views.py中函数的主要处理者，由于解析网址的指定方式是以Regression Express正则表达式
# 的语法来处理，因此功能非常强大，也很有弹性．URLconf处理网址的步骤如下

# 步骤１：到settings.py中找到ROOT_URLCONF的设置，决定要使用哪一个模块．一般来说，大部分网站都不需要修改这个地方的设置

# 步骤２：　加载前述所指定的模块，然后找到urlpatterns变量，根据其中的设置来找到对应要处理的网址与函数

# 步骤３：　　按照urlpatterns中的顺序，一个一个往下核对网址和正则表达式中的设置pattern

# 步骤４：　　发现第一个匹配的设置后，先以HttpRequest的一个实例作为第一个参数，然后把在解析网址中发现的参数按照顺序传送给后面的处理函数

# 步骤５：　　如果找不到匹配的pattern,就会产生一个例外，交由错误处理程序

# 假设本章一开始使用django-admin startproject ch005www新创建一个网站项目，那么在新的项目会在settings.py的设置中有一行指令：

ROOT_URLCONF = 'ch05www.urls'

# 就是设置这个网址系统一开始要要去搜索的文件,默认值就是网址项目名称(项目)下的urls.py,所以第一步要找到urls.py,并打开它进行编辑


# 在urls.py中,找出urlpattern列表,然后在其中进行修改即可,这也是我们在前面的所做的操作,一般来说,网址对应也算对于整个网站的基本设置,所以
# urls.py和settings.py 放在同一层文件夹中.刚开始的一个Django网站,其最初的urls.py内容如下

from django.conf.urls import url
from django.contrib import admin

urlpatterns = [
    url(r'^admin/', admin.site.urls),
]

#　第一行加载的是处理url的专用模块，而第二行是用来导入处理Django附赠的后台管理网页模块admin.也是因为是admin的设置，所以在urlpatterns列表
#　变量的设置中，还要先设置若网址是以admin/开头的，则直接以admin.site.urls中的设置为准，其他网址设置只要没有冲突，放在之前或之后都可以
#　接着在我们使用python manage.py startapp mysite创建了这个新项目的第一个App文件夹，并在views中定义了一个处理首页显示的函数，假设叫做
#　homepage,那么上述设置就要改写如下 注意正则表达式的写法

#　然后在views.py中编写homepage函数，即可顺利让浏览首页的朋友看到Hello world字样，如下

#  因此，只要在views.py中定义好了要处理的函数或类，然后在urlpatterns中建立正确的网址对应，就可以让网址的各个网页之间顺利运行了
#  当然，如果在设置字符串中什么都不动，那么默认会适合所有的网址，也就是不管网址输入的是什么格式，都会认为是匹配的，如果您的网站中不打算让用户
#  看到找不到指定页面，而是只要输入错误就让它们转到首页，那么可以考虑在所有网址栏样式的最后一行加入如下设置：
url(r'',views.homepage),
#  5.1.2 urlpatterns 的Regular Expression语法说明

# 那么，有哪些RE可以在urlpatterns中使用呢？基本上所有RE符号都可以使用．在此将常用在网址上的符号进行整理
# 最简单的对应方式是直接使用文字内容，例如把localhost/about委派到about函数，把localhost/list委派到listing函数，只要直接编写为urlpatterns即可
# 值得注意的是，在about,list后面的"/","$"非常重要．　　＂/＂会在输入网址的时候自动被加入，因此如果没有加上这个符号就无法正确地定位，而
# 后面的"$"表示在"/"后面如果再加上其他字符，就不是我们想要解析使用的网址
# 在这种情况下，如果我们想要设置一个通用的about网页，例如某一个网页上有４位共同的，分别为０～３　，可以设置如下

url(r'about/[0|1|2|3]/$',views.about),  #这是一个通用的网页
url(r'about/([0|1|2|3])/$',views.about),  #这是分别４个网页

# 此时，在views.py中的about函数要设置一个自变量来自接受传送进来的参数，语句如下：
# 一定记得把应用注册到settings.py里 ，应用是在项目的层级之下，不能同级！
# 在about后面只接收数字0~3,其他字符以及数字均不接收,就算是localhost:8000/about/0001也不行,因为网址均被当做文字而非数字处理,所以
#  0001并不会被转换为１
#  在上例子中的about(request,author_no)函数中，author_no可以任意地识别名称，不管叫什么名字，它都会接收在urlpattern中匹配的样式
# 的第一个匹配的子样式．如果要取出的子样式比较多，一般都会在参数传送的设置中先设置要传送的参数名称，以增加程序的可读性．语句如下
url(r'about/(?P<author_no>[0|1|2|3])/$',about),

# 如果要在此设置子样式的名称,在views相对应的函数中就一定要使用相同的名称才可以
# 再举一个例子,在网站中经常会有按照时间分门别类的方式存取数据的情况,类似的网址可能如下:
#  localhost:8000/list/2016/05/12

#  表示要取出所有该日期中相关的数据做个列表,或是:
#   localhost:8000/post/2016/05/12

#  要取出当日编号为01号的文章,像这样的网址该如何设计urlpattern呢?首先是年份的部分,公元年份一定是4个数字没有问题,而月份有可能只有1位或2位,另外,
# 日期是一样的.至于在显示单一文章时,后面额编号可以接收多少位数也是要考虑的,在此假设最多3位数,有如下两个url
# 在views.py中的函数如如下
#　不过，我们会在网址中做跟进一步地解析，以方便在函数中处理时使用．以上post函数为例，也可以把urlpattern的各个子样式取出来
# 　等于是分别取出年，月，日以及文章的编号，如此在进行数据库文章搜索的时候，会更方便程序的编写．修正后的网页执行结果瑞星
# 值得一提的是,传统用来查询特定数据(POST和GET)的一些网址格式(如localhost:8000?page=10),Django会把它忽视不予处理,它的结果
#　和"localhost:8000"是一样的

#　５．１．３　验证RE设计URL的正确性
#　通过http:pythex.org/　来验证


#


